data <- data.frame(x = rnorm(100000), y = rnorm(100000))
server <- function(input, output, session) {
df <- reactive({
start <- input$start
N <- 100
plot_data <- data[start:(start - 1 + 100), ]
plot_data$gr <- paste0(plot_data$x, plot_data$y)
plot_data
})
observe(
ggvis(df) %>%
layer_points(~x, ~y) %>%
set_options(duration = 1000) %>%
scale_numeric("x", domain = c(-5, 5)) %>%
bind_shiny("plot")
)
}
ui <- shinyUI({
fluidPage(
mainPanel(
sliderInput("start", "Start", min = 1, max = 901, value = 1, step = 1, animate = TRUE),
ggvisOutput("plot")
)
)
})
shinyApp(server = server, ui = ui)
data <- data.frame(x = rnorm(100000), y = rnorm(100000))
server <- function(input, output, session) {
df <- reactive({
start <- input$start
N <- 100
plot_data <- data[start:(start - 1 + 100), ]
plot_data$gr <- paste0(plot_data$x, plot_data$y)
plot_data
})
observe(
ggvis(df) %>%
layer_points(~x, ~y) %>%
set_options(duration = 1000) %>%
scale_numeric("x", domain = c(-5, 5)) %>%
scale_numeric("y", domain = c(-5, 5)) %>%
bind_shiny("plot")
)
}
ui <- shinyUI({
fluidPage(
mainPanel(
sliderInput("start", "Start", min = 1, max = 901, value = 1, step = 1, animate = TRUE),
ggvisOutput("plot")
)
)
})
shinyApp(server = server, ui = ui)
data <- data.frame(x = c(rnorm(100), 4), y = c(rnorm(100), 4))
server <- function(input, output, session) {
df <- reactive({
start <- input$start
N <- 100
plot_data <- data[start:(start - 1 + 100), ]
plot_data$gr <- paste0(plot_data$x, plot_data$y)
plot_data
})
ggvis(df) %>%
layer_points(~x, ~y) %>%
set_options(duration = 1000) %>%
scale_numeric("x", domain = c(-5, 5)) %>%
scale_numeric("y", domain = c(-5, 5)) %>%
bind_shiny("plot")
}
ui <- shinyUI({
fluidPage(
mainPanel(
sliderInput("start", "Start", min = 1, max = 2, value = 1, step = 1, animate = TRUE),
ggvisOutput("plot")
)
)
})
shinyApp(server = server, ui = ui)
data <- data.frame(x = c(rnorm(100), 4), y = c(rnorm(100), 4), gr = 1:101)
server <- function(input, output, session) {
df <- reactive({
start <- input$start
N <- 100
plot_data <- data[start:(start - 1 + 100), ]
plot_data
})
ggvis(df %>% group_by(gr)) %>%
layer_points(~x, ~y) %>%
set_options(duration = 1000) %>%
scale_numeric("x", domain = c(-5, 5)) %>%
scale_numeric("y", domain = c(-5, 5)) %>%
bind_shiny("plot")
}
ui <- shinyUI({
fluidPage(
mainPanel(
sliderInput("start", "Start", min = 1, max = 2, value = 1, step = 1, animate = TRUE),
ggvisOutput("plot")
)
)
})
shinyApp(server = server, ui = ui)
data <- data.frame(x = rnorm(100), y = rnorm(100))
server <- function(input, output, session) {
df <- reactive({
start <- input$start
plot_data <- data
if (input$start == 2) {
plot_data[1, ] <- c(4,4)
}
plot_data
})
ggvis(df %>% group_by(gr)) %>%
layer_points(~x, ~y) %>%
set_options(duration = 1000) %>%
scale_numeric("x", domain = c(-5, 5)) %>%
scale_numeric("y", domain = c(-5, 5)) %>%
bind_shiny("plot")
}
ui <- shinyUI({
fluidPage(
mainPanel(
sliderInput("start", "Start", min = 1, max = 2, value = 1, step = 1, animate = TRUE),
ggvisOutput("plot")
)
)
})
shinyApp(server = server, ui = ui)
data <- data.frame(x = rnorm(100), y = rnorm(100))
server <- function(input, output, session) {
df <- reactive({
start <- input$start
plot_data <- data
if (input$start == 2) {
plot_data[1, ] <- c(4,4)
}
plot_data
})
ggvis(df) %>%
layer_points(~x, ~y) %>%
set_options(duration = 1000) %>%
scale_numeric("x", domain = c(-5, 5)) %>%
scale_numeric("y", domain = c(-5, 5)) %>%
bind_shiny("plot")
}
ui <- shinyUI({
fluidPage(
mainPanel(
sliderInput("start", "Start", min = 1, max = 2, value = 1, step = 1, animate = TRUE),
ggvisOutput("plot")
)
)
})
shinyApp(server = server, ui = ui)
shiny::runApp('ggcircos/example_apps/reactive_tests')
shiny::runApp('Documents/R_scripts/ggcircos_examples/reactive_tests')
shiny::runApp('Documents/R_scripts/split_radians_test')
library(xapparr30)
str(parr30_sample)
library(xapparr30)
library(ggvis)
library(shiny)
N <- 200
mod_discharge <- sample(c("Yes", "No"), 10000, replace = TRUE)
x_discharge <- runif(10000, 4, 4.5)
y_discharge <- runif(10000, 0.4, 0.6)
pred <- predict(recalibrated, type = "response")
response <- parr30_sample$readmitted
circle_x <- rnorm(10000, 0, 0.4)
circle_y <- rnorm(10000, 0.5, 0.08)
x_all <- runif(10000, 2, 3)
server <- function(input, output, session) {
sample <- reactive({
start <- input$start
parr30_sample[start:(start - 1 + N),]
})
p <- reactive({
start <- input$start
pred[start:(start - 1 + N)]
})
resp <- reactive({
start <- input$start
response[start:(start - 1 + N)]
})
c_x <- reactive({
start <- input$start
circle_x[start:(start - 1 + N)]
})
c_y <- reactive({
start <- input$start
circle_y[start:(start - 1 + N)]
})
points_df <- reactive({
start <- input$start
mod_dis <- mod_discharge[start:(start - 1 + N)]
x <- x_all[start:(start - 1 + N)]
x_dis <- x_discharge[start:(start - 1 + N)]
y_dis <- y_discharge[start:(start - 1 + N)]
breaks <- c(0, input$breaks, 1)
low_med_high <- cut(p(), breaks, labels = c("Low", "Moderate", "High"))
discharged <- ifelse(low_med_high == "Low", "Yes",
ifelse(low_med_high == "High", "No",
mod_dis))
offset <- ifelse(low_med_high == "Low", -0.2, ifelse(low_med_high == "Moderate", 0, 0.2))
y_dis <- y_dis + ifelse(discharged == "Yes", -0.3, 0.3)
df <- data.frame(p = p(), resp = resp(), x, low_med_high, offset, discharged, x_dis, y_dis, c_x = c_x(), c_y = c_y())
df
})
rects_df <- reactive({
breaks <- c(0, input$breaks, 1)
rects_x <- c(1.9, 1.9, 1.9, 3.9, 3.9)
rects_x2 <- c(3.1, 3.1, 3.1, 5.6, 5.6)
rects_y <- c(-0.22, breaks[2] - 0.02, breaks[3] + 0.18, 0, 0.6)
rects_y2 <- c(breaks[2] - 0.18, breaks[3] + 0.02, 1.22, 0.4, 1)
rects_df <- data.frame(rects_x, rects_x2, rects_y, rects_y2)
rects_df
})
ggvis(points_df) %>%
layer_points(~x, ~p + offset, fillOpacity := ~resp, stroke = ~low_med_high, fill = ~low_med_high) %>%
layer_points(~x_dis + resp, ~y_dis, fillOpacity := ~resp, stroke = ~low_med_high, fill = ~low_med_high) %>%
layer_points(~c_x, ~c_y, fillOpacity := ~resp, stroke := "black") %>%
layer_rects(data = rects_df, x = ~rects_x, x2 = ~rects_x2, y = ~rects_y, y2 = ~rects_y2, stroke := "black", fillOpacity := 0) %>%
hide_axis("x") %>%
hide_axis("y") %>%
set_options(duration = 500) %>%
bind_shiny("plot")
}
ui <- shinyUI({
fluidPage(
titlePanel("PARR30"),
mainPanel(
sliderInput("breaks", "Set Cut-offs", min = 0, max = 1, value = c(0.33, 0.67), step = 0.01),
ggvisOutput("plot"),
sliderInput("start", "Time", min = 1, max = 9901, value = 1, step = 1, animate = TRUE)
)
)
})
shinyApp(server = server, ui = ui)
data <- data.frame(x = rnorm(100000), y = rnorm(100000))
server <- function(input, output, session) {
df <- reactive({
start <- input$start
N <- 100
plot_data <- data[start:(start - 1 + 100), ]
plot_data$gr <- paste0(plot_data$x, plot_data$y)
plot_data
})
observe(
ggvis(df) %>%
layer_points(~x, ~y) %>%
set_options(duration = 1000) %>%
scale_numeric("x", domain = c(-5, 5)) %>%
scale_numeric("y", domain = c(-5, 5)) %>%
bind_shiny("plot")
)
}
ui <- shinyUI({
fluidPage(
mainPanel(
sliderInput("start", "Start", min = 1, max = 901, value = 1, step = 1, animate = TRUE),
ggvisOutput("plot")
)
)
})
shinyApp(server = server, ui = ui)
data <- data.frame(x = rnorm(100), y = rnorm(100))
server <- function(input, output, session) {
df <- reactive({
start <- input$start
plot_data <- data
if (input$start == 2) {
plot_data[1, ] <- c(4,4)
}
plot_data
})
ggvis(df) %>%
layer_points(~x, ~y) %>%
set_options(duration = 1000) %>%
scale_numeric("x", domain = c(-5, 5)) %>%
scale_numeric("y", domain = c(-5, 5)) %>%
bind_shiny("plot")
}
ui <- shinyUI({
fluidPage(
mainPanel(
sliderInput("start", "Start", min = 1, max = 2, value = 1, step = 1, animate = TRUE),
ggvisOutput("plot")
)
)
})
shinyApp(server = server, ui = ui)
source("ggcircos_helpers.R")
server <- function(input, output, session) {
}
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
create_radians
create_track_radians
create_seq_df
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
debug(seq.default)
shiny::runApp('Documents/xap_circos_miniapp_ideas')
from
to
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
create_radians
create_track_radians
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('ggcircos/example_apps/reactive_tests')
debug(seq.default)
shiny::runApp('ggcircos/example_apps/reactive_tests')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp()
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
from
radiansd
radians
radians
debug(create_track_df)
debug(add_track)
shiny::runApp('Documents/xap_circos_miniapp_ideas')
undebug(seq.default)
shiny::runApp('Documents/xap_circos_miniapp_ideas')
create_track_radians
debug(create_track_radians)
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
radians
seq
shiny::runApp('Documents/xap_circos_miniapp_ideas')
shiny::runApp('Documents/xap_circos_miniapp_ideas')
radians
radians()
seq
source("ggcircos_helpers.R")
library(shiny)
library(ggvis)
library(dplyr)
## define some sequences
chroms <- c(1,2,3)
chrom_lengths <- c(10000, 5000, 2000)
total_gap <- 0.1
radians <- create_radians(chroms, chrom_lengths, total_gap)
# create sample data
chrom_positions <- sapply(chrom_lengths, sample, 20)
points_df <- data.frame(name = factor(chroms), position = c(t(chrom_positions))) %>% arrange(name, position)
points_df$value <- rnorm(20 * length(chroms))
points_df$key <- 1:60
chrom_positions <- sapply(chrom_lengths, sample, 20)
points_df2 <- data.frame(name = factor(chroms), position = c(t(chrom_positions))) %>% arrange(name, position)
points_df2$value <- rnorm(20 * length(chroms))
points_df2$key <- 1:60
chr_froms <- sample(chroms, 10, replace = T)
chr_tos <- sample(chroms, 10, replace = T)
pos_froms <- sapply(chr_froms, function(x) sample(chrom_lengths[chroms == x], 1))
pos_tos <- sapply(chr_tos, function(x) sample(chrom_lengths[chroms == x], 1))
chr_froms2 <- sample(chroms, 10, replace = T)
chr_tos2 <- sample(chroms, 10, replace = T)
pos_froms2 <- sapply(chr_froms2, function(x) sample(chrom_lengths[chroms == x], 1))
pos_tos2 <- sapply(chr_tos2, function(x) sample(chrom_lengths[chroms == x], 1))
links_df <- data.frame(chr_from = chr_froms, pos_from = pos_froms, chr_to = chr_tos, pos_to = pos_tos)
links_df2 <- data.frame(chr_from = chr_froms2, pos_from = pos_froms2, chr_to = chr_tos2, pos_to = pos_tos2)
# chr_to <- sample(chroms, 5, replace = T)
# chr_from <- sample(chroms, 5, replace = T)
#
# chr_to2 <- sample(chroms, 5, replace = T)
# chr_from2 <- sample(chroms, 5, replace = T)
chr_to <- c(1,1,2,2,3)
chr_from <- c(2,3,3,1,1)
chr_to2 <- c(3,3,2,1,2)
chr_from2 <- c(1,2,1,2,3)
pos_from_start <- sapply(chr_from, function(x) sample(chrom_lengths[chroms == x] - 1000, 1))
pos_from_end <- pos_from_start + sample(100:1000, 5)
pos_to_start <- sapply(chr_to, function(x) sample(chrom_lengths[chroms == x] - 1000, 1))
pos_to_end <- pos_to_start + sample(100:1000, 5)
pos_from_start2 <- sapply(chr_from2, function(x) sample(chrom_lengths[chroms == x] - 1000, 1))
pos_from_end2 <- pos_from_start2 + sample(100:1000, 5)
pos_to_start2 <- sapply(chr_to2, function(x) sample(chrom_lengths[chroms == x] - 1000, 1))
pos_to_end2 <- pos_to_start2 + sample(100:1000, 5)
# chr_to <- c(1,1,2,2,3)
# chr_from <- c(1,3,3,1,1)
#
# pos_from_start <- c()
ribbons_df <- data.frame(chr_from = chr_from, chr_to = chr_to,
pos_from_start = pos_from_start,
pos_from_end = pos_from_end,
pos_to_start = pos_to_start,
pos_to_end = pos_to_end)
ribbons_df2 <- data.frame(chr_from = chr_from2, chr_to = chr_to2,
pos_from_start = pos_from_start2,
pos_from_end = pos_from_end2,
pos_to_start = pos_to_start2,
pos_to_end = pos_to_end2)
debug(create_track_radians)
debug(create_radians)
server <- function(input, output, session) {
re_values <- reactiveValues(scaling_factors = rep(1, 3), previous_radians = radians, chrom_clicked = chroms[1], previous_rotate = 0)
radians <- reactive({
rads <- create_radians(seq = chroms, lengths = chrom_lengths * re_values$scaling_factors, total_gap)
# isolate here so that radians only re-evaluates when the click handle changes scaling_factors
isolate(mid <- mean(rads[names(rads) == re_values$chrom_clicked]))
isolate(prev_mid <- mean(re_values$previous_radians[names(rads) == re_values$chrom_clicked]))
offset <- mid - prev_mid
rads - offset + pi * (input$rotate - re_values$previous_rotate) / 180
})
track_radians <- reactive({
create_track_radians(radians = radians(), seq = chroms, approx_points = 400)
})
seq_df <- reactive({
s <- create_seq_df(radians = radians(), scale = re_values$scaling_factors)
})
points <- reactive({
if (input$points == 1) {
#print(head(points_df))
points_df
} else {
#print(head(points_df2))
points_df2
}
})
links <- reactive({
if (input$points == 1) {
links_df
} else {
links_df2
}
})
ribbons <- reactive({
if (input$points == 1) {
ribbons_df
} else {
ribbons_df2
}
})
click_handle <- function(data, location, session) {
if(is.null(data)) return(NULL)
isolate(re_values$chrom_clicked <- data$group)
isolate(re_values$previous_radians <- radians())
isolate(re_values$previous_rotate <- input$rotate)
isolate(re_values$scaling_factors[which(chroms == data$group)] <- ifelse(re_values$scaling_factors[which(chroms == data$group)] == 1,
input$scale_factor, 1))
#print(data)
}
tooltip_fun <- function(data) {
if ("key" %in% names(data)) {
points()[points()$key == data$key, ]$value
}
}
ggvis() %>%
add_track(track_radians, 1, 0.9, fill = ~group) %>%
add_track(track_radians, 0.85, 0.6) %>%
add_circles(track_radians, c(0.8, 0.75, 0.7, 0.65), opacity := 0.2) %>%
add_points(seq_df = seq_df, data = points, name, position, value,
0.85, 0.6, metadata = data.frame(key = 1:60), size := 15, key := ~key, fill := "black", fill.hover := "red") %>%
add_links(seq_df = seq_df, data = links, chr_from, chr_to,
pos_from, pos_to, 0.6, 0.6, 0) %>%
add_ribbons(seq_df = seq_df, data = ribbons, chr_from, chr_to,
pos_from_start, pos_from_end, pos_to_start, pos_to_end, 0.6, 0.6, 0, fill = ~name_from, opacity := 0.6) %>%
add_tooltip(tooltip_fun) %>%
handle_click(click_handle) %>%
hide_axis("x") %>%
hide_axis("y") %>%
hide_legend("fill") %>%
set_options(duration = 1000) %>%
bind_shiny("plot")
}
shiny::runApp('Documents/xap_circos_miniapp_ideas')
radians
radians
shiny::runApp('Documents/xap_circos_miniapp_ideas')
seq
points_per_track
seq
lengths
total_gap
stand_lengths
all_lengths
all_radians
all_radians
all_radians
shiny::runApp('Documents/xap_circos_miniapp_ideas')
radians
radians
radians
shiny::runApp('Documents/xap_circos_miniapp_ideas')
radians
radians
seq
lengtjs
lenghts
lengths
all_lengths
all_radians
all_radians
shiny::runApp('Documents/xap_circos_miniapp_ideas')
radians
radians
shiny::runApp('ggcircos/example_apps/reactive_tests')
radians
all_radians
radians
all_radians
radians
